[{"/Users/jeancarlosramos/Desktop/Builds/FE/plant-app/src/index.js":"1","/Users/jeancarlosramos/Desktop/Builds/FE/plant-app/src/App.js":"2","/Users/jeancarlosramos/Desktop/Builds/FE/plant-app/src/components/Navbar.js":"3","/Users/jeancarlosramos/Desktop/Builds/FE/plant-app/src/components/SignUp.js":"4","/Users/jeancarlosramos/Desktop/Builds/FE/plant-app/src/components/Login.js":"5"},{"size":254,"mtime":1611977845842,"results":"6","hashOfConfig":"7"},{"size":475,"mtime":1611980150231,"results":"8","hashOfConfig":"7"},{"size":1539,"mtime":1611977845839,"results":"9","hashOfConfig":"7"},{"size":3732,"mtime":1612058669474,"results":"10","hashOfConfig":"7"},{"size":2428,"mtime":1612058669469,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"98poqe",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"/Users/jeancarlosramos/Desktop/Builds/FE/plant-app/src/index.js",[],"/Users/jeancarlosramos/Desktop/Builds/FE/plant-app/src/App.js",[],"/Users/jeancarlosramos/Desktop/Builds/FE/plant-app/src/components/Navbar.js",[],["24","25"],"/Users/jeancarlosramos/Desktop/Builds/FE/plant-app/src/components/SignUp.js",[],"/Users/jeancarlosramos/Desktop/Builds/FE/plant-app/src/components/Login.js",["26"],"import React, { useState, useEffect } from 'react';\nimport * as yup from 'yup';\n\nimport { Container, Label, Input, Form, Button } from './SignUp';\n\n//Schema for the shape of the form\nconst schema = yup.object().shape({\n\tusername: yup.string().required('Name is Required').min(2, 'Needs at least 2 characters)'),\n\tpassword: yup.string().required('Please Enter Password').min(6, 'Needs at least 6 characters')\n});\n\nexport default function Login() {\n\t//State for login\n\tconst [login, setLogin] = useState({\n\t\tusername: '',\n\t\tpassword: ''\n\t});\n\n\t// State for a completed login (can be rendered if needed)\n\tconst [loginDone, setLoginDone] = useState([]);\n\n\t//state to disable login submit button\n\tconst [disabled, setDisabled] = useState(true);\n\n\t//state to set errors for login\n\tconst [loginErrors, setLoginErrors] = useState({\n\t\tusername: '',\n\t\tpassword: ''\n\t});\n\n\t//function that validates errors based on the schema\n\tconst validate = e => {\n\t\tyup.reach(schema, e.target.name)\n\t\t\t.validate(e.target.value)\n\t\t\t.then(() => setLoginErrors({ ...loginErrors, [e.target.name]: '' }))\n\t\t\t.catch(err => setLoginErrors({ ...loginErrors, [e.target.name]: err.errors[0] }));\n\t};\n\n\tuseEffect(() => {\n\t\tschema.isValid(login).then(valid => setDisabled(!valid));\n\t}, [login]);\n\n\t// Change function\n\tconst onChange = e => {\n\t\t// const { name, value } = e.target;\n\t\tsetLogin({ ...login, [e.target.name]: e.target.value });\n\n\t\tvalidate(e);\n\t};\n\n\t//Submit function -\n\tconst onSubmit = e => {\n\t\tconsole.log('Login form submitted');\n\t\te.preventDefault();\n\n\t\tconst loginComplete = { username: login.username.trim(), password: login.password };\n\n\t\tsetLoginDone([...loginDone, loginComplete]);\n\n\t\tsetLogin({\n\t\t\tusername: '',\n\t\t\tpassword: ''\n\t\t});\n\t};\n\n\treturn (\n\t\t<Container>\n\t\t\t<Form onSubmit={onSubmit}>\n\t\t\t\t<h2>Login</h2>\n\n\t\t\t\t<Label htmlFor=\"username\">Username</Label>\n\t\t\t\t<Input\n\t\t\t\t\tid=\"username\"\n\t\t\t\t\tname=\"username\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tplaceholder=\"Enter Username\"\n\t\t\t\t\tvalue={login.username}\n\t\t\t\t\tonChange={onChange}\n\t\t\t\t/>\n\n\t\t\t\t<div style={{color: 'red'}}>{loginErrors.username}</div>\n\n\t\t\t\t<Label htmlFor=\"password\">Password </Label>\n\t\t\t\t<Input\n\t\t\t\t\tid=\"passowrd\"\n\t\t\t\t\tname=\"password\"\n\t\t\t\t\ttype=\"password\"\n\t\t\t\t\tplaceholder=\"Enter Password\"\n\t\t\t\t\tvalue={login.password}\n\t\t\t\t\tonChange={onChange}\n\t\t\t\t/>\n\n\t\t\t\t<div style={{color: 'red'}}>{loginErrors.password}</div>\n\n\t\t\t\t<Button disabled={disabled}>Login</Button>\n\t\t\t</Form>\n\t\t</Container>\n\t);\n}\n",{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":32,"column":8,"nodeType":"33","messageId":"34","endLine":32,"endColumn":16},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"no-unused-vars","'validate' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]